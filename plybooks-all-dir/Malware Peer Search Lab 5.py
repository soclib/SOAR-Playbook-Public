"""
"""

import phantom.rules as phantom
import json
from datetime import datetime, timedelta
def on_start(container):
    phantom.debug('on_start() called')
    
    # call 'Query_String' block
    Query_String(container=container)

    return

def run_query_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):
    phantom.debug('run_query_1() called')

    # collect data for 'run_query_1' call
    formatted_data_1 = phantom.get_format_data(name='Query_String')

    parameters = []
    
    # build parameters list for 'run_query_1' call
    parameters.append({
        'query': formatted_data_1,
        'display': "",
    })

    phantom.act("run query", parameters=parameters, assets=['splunk'], callback=Container_Comment_String, name="run_query_1")

    return

def Query_String(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):
    phantom.debug('Query_String() called')
    
    template = """|savedsearch Peers host=\"{0}{1}\""""

    # parameter list for template variable replacement
    parameters = [
        "artifact:*.cef.destinationAddress",
        "artifact:*.cef.destinationHostName",
    ]

    phantom.format(container=container, template=template, parameters=parameters, name="Query_String")

    run_query_1(container=container)

    return

def Container_Comment_String(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):
    phantom.debug('Container_Comment_String() called')
    
    template = """Server{0}{1} has {2} peers."""

    # parameter list for template variable replacement
    parameters = [
        "artifact:*.cef.destinationHostName",
        "artifact:*.cef.destinationAddress",
        "run_query_1:action_result.summary.total_events",
    ]

    phantom.format(container=container, template=template, parameters=parameters, name="Container_Comment_String")

    Make_List(container=container)

    return

def update_event_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):
    phantom.debug('update_event_1() called')
    
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'update_event_1' call
    container_data = phantom.collect2(container=container, datapath=['artifact:*.cef.event_id', 'artifact:*.id'])
    formatted_data_1 = phantom.get_format_data(name='Notable_Comment_String')

    parameters = []
    
    # build parameters list for 'update_event_1' call
    for container_item in container_data:
        if container_item[0]:
            parameters.append({
                'owner': "",
                'status': "in progress",
                'event_ids': container_item[0],
                'comment': formatted_data_1,
                'urgency': "",
                # context (artifact id) is added to associate results with the artifact
                'context': {'artifact_id': container_item[1]},
            })

    phantom.act("update event", parameters=parameters, assets=['splunk'], callback=playbook_local_Triage_Peers_1, name="update_event_1")

    return

def Notable_Comment_String(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):
    phantom.debug('Notable_Comment_String() called')
    
    template = """Processing in Phantom, See {0}"""

    # parameter list for template variable replacement
    parameters = [
        "container:url",
    ]

    phantom.format(container=container, template=template, parameters=parameters, name="Notable_Comment_String")

    update_event_1(container=container)

    return

def add_comment_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):
    phantom.debug('add_comment_1() called')

    formatted_data_1 = phantom.get_format_data(name='Container_Comment_String')

    phantom.comment(container=container, comment=formatted_data_1)
    Notable_Comment_String(container=container)

    return

def Make_List(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):
    phantom.debug('Make_List() called')
    results_data_1 = phantom.collect2(container=container, datapath=['run_query_1:action_result.data'], action_results=results)
    results_item_1_0 = [item[0] for item in results_data_1]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...
    list_name = "temp_peer_list_%s" % container['id']
    
    # Store list name in container data
    data = phantom.get_container(container['id'])['data']
    data.update({"peer_list":list_name})
    phantom.update(container, {'data':data} )
    
    phantom.remove_list(list_name)
    
    #phantom.debug(results_item_1_0)
    for row in results_item_1_0[0]:
        phantom.add_list(list_name, [row["peer"],row["count"], row["priority"]])

    ################################################################################
    ## Custom Code End
    ################################################################################
    add_comment_1(container=container)

    return

def playbook_local_Triage_Peers_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):
    phantom.debug('playbook_local_Triage_Peers_1() called')
    
    # call playbook "local/Triage Peers", returns the playbook_run_id
    playbook_run_id = phantom.playbook("local/Triage Peers", container=container)

    return

def on_finish(container, summary):
    phantom.debug('on_finish() called')
    # This function is called after all actions are completed.
    # summary of all the action and/or all detals of actions
    # can be collected here.

    # summary_json = phantom.get_summary()
    # if 'result' in summary_json:
        # for action_result in summary_json['result']:
            # if 'action_run_id' in action_result:
                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)
                # phantom.debug(action_results)

    return